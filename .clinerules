# プロジェクトガイドライン

## 技術要件

- TypeScriptを使用して開発を行うこと
- Next.jsを使用してフロントエンドを開発すること
- 認証はOIDC準拠のものを使うこと
- APIに関するものはOpenAPI仕様書から生成すること

## ドキュメント要件

- APIに関するドキュメントはOpenAPI仕様書で記述すること
- TypeScriptのコードにはJSDocを記述すること

## テスト基準

- ビジネスロジックは純粋な関数として実装し、テストを行うこと
- テストはVitestを使用して行うこと
- テストは*.test.tsで記述すること
- コンポーネントのテストはReact Testing Libraryを使用して行うこと

## コードスタイルとパターン

- .devcontainerを使用して開発環境を統一すること
- .editorconfigを使用してエディタの設定を統一すること
- GitHub Actionsを使用してCIを行うこと
- ESLintを使用してコードスタイルを統一すること
- Prettierを使用してコードフォーマットを統一すること
- TypeScriptの型定義は可能な限り具体的に記述すること

### ESLintの設定

- TypeScriptのコードに対しては`@typescript-eslint`を使用すること
- ルールの設定は`.eslintrc.js`に記述すること
- ルールの設定は可能な限り厳格にすること
- ルールはFlatConfigを使用して設定すること

### TypeScriptの型定義

- `any`型の使用を避けること
- `unknown`型を使用して型安全性を高めること
- 型ガードを使用して型の安全性を高めること
- interfaceをできる限り使用すること
- 型キャストは使用しないこと

### Next.js

- App routerを使用すること
- ServerComponentを積極的に使用すること
- Componentをできる限り細かく分割すること
- ビジネスロジックは使用するコンポーネントの直下にlibディレクトリに分離すること

### コンポーネントの書き方

以下にコンポーネントの書き方について記述する。
```tsx
import {JSX} from 'react';

interface Props {
  name: string;
  age: number;
}

const MyComponent = ({name, age}: Props): JSX.Element => {
  return (
    <div>
      <p>{name}</p>
      <p>{age}</p>
    </div>
  );
};

export default MyComponent;
```

### ビジネスロジックの書き方

以下にビジネスロジックの書き方について記述する。
```ts
// user.ts
interface User {
  firstName: string;
  lastName: string;
  middleName?: string;
}

export const getFullName = (user: User): string => {
  if (user.middleName) {
    return `${user.firstName} ${user.middleName} ${user.lastName}`;
  }
  return `${user.firstName} ${user.lastName}`;
};
```

以下にこのビジネスロジックのテストを記述する。
```ts
// user.test.ts
import {describe, expect, it} from 'vitest';
import {getFullName} from './user';

describe('getFullName', () => {
  it('should return full name', () => {
    const user = {
      firstName: 'John',
      lastName: 'Doe',
    };
    expect(getFullName(user)).toBe('John Doe');
  });

  it('should return full name with middle name', () => {
    const user = {
      firstName: 'John',
      middleName: 'Smith',
      lastName: 'Doe',
    };
    expect(getFullName(user)).toBe('John Smith Doe');
  });
});
```

### OpenAPI 仕様書の書き方

- OpenAPI仕様書はYAML形式で記述すること
- Componentsを使用してスキーマを定義すること
- 3.1を使用すること
- 入力のスキーマにはInputの接尾辞をつけること
- 出力のスキーマにはOutputの接尾辞をつけること
- 入力の例を記述すること
- 出力の例を記述すること
- 200, 400のレスポンスは必ず記述すること

以下にOpenAPI仕様書の書き方について記述する。

```yaml
openapi: 3.1.0
info:
  title: Sample API
  version: 1.0.0
paths:
  /users:
    get:
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersOutput'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    UsersOutput:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Error:
      type: object
      properties:
        message:
          type: string
```